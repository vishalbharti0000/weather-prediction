pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        CONTAINER_NAME = 'advice-service-weather-prediction'
        ECR_REPO_NAME = 'advice-service-weather-prediction'
        VERSION_TAG = "${env.BUILD_ID}-${new Date().format('yyyyMMdd-HHmmss')}" // Combined build ID and timestamp
        INSTANCE_IP = '52.71.165.52'
        SSH_USER = 'ec2-user'
        AWS_ACCOUNT_ID = '776951075837'
        JAVA_HOME = '/usr/lib/jvm/java-21-amazon-corretto.x86_64'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
        REPO_BASE_URL = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        REPO_URL = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"
    }

    stages {
        stage('Checkout from Git') {
            steps {
                echo "Starting Git checkout from release branch..."
                git branch: 'release', url: 'https://github.com/vishalbharti0000/weather-prediction.git'
                echo "Git checkout completed successfully. Commit ID: ${GIT_COMMIT.take(8)}"
            }
        }

        stage('Build Project') {
            steps {
                script {
                    echo "Starting Maven build process for advice service..."
                    dir('backend/advice-service-weather-prediction') {
                        try {
                            sh """
                            echo "Current working directory: \$(pwd)"
                            echo "Directory contents:"
                            ls -la
                            echo "Running Maven build..."
                            mvn clean install
                            """
                            echo "Maven build completed successfully"

                            // Verify the JAR file was created
                            if (!fileExists('target/advice-service-weather-prediction.jar')) {
                                error("Build failed: JAR file not found in target directory!")
                            }
                            echo "JAR file verified: target/advice-service-weather-prediction.jar (Size: ${fileSize('target/advice-service-weather-prediction.jar')} bytes)"
                        } catch (Exception e) {
                            echo "Maven build failed with error: ${e.getMessage()}"
                            error("Build stage failed")
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Starting Docker image build process..."
                    dir('backend/advice-service-weather-prediction') {
                        try {
                            sh """
                            echo "Building Docker image with tags:"
                            echo "  - Version: ${REPO_URL}:${VERSION_TAG}"
                            echo "  - Latest: ${REPO_URL}:latest"

                            docker build -t ${REPO_URL}:${VERSION_TAG} -t ${REPO_URL}:latest .

                            echo "Docker images built successfully:"
                            docker images | grep ${ECR_REPO_NAME}
                            """
                            echo "Docker image build completed"
                        } catch (Exception e) {
                            echo "Docker build failed with error: ${e.getMessage()}"
                            error("Docker build stage failed")
                        }
                    }
                }
            }
        }

        stage('Login to Amazon ECR') {
            steps {
                script {
                    echo "Starting AWS ECR login process..."
                    withCredentials([usernamePassword(credentialsId: 'aws-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        try {
                            sh """
                            echo "Configuring AWS CLI..."
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws configure set region $AWS_REGION

                            echo "Logging into ECR..."
                            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${REPO_BASE_URL}

                            echo "ECR login successful"
                            """
                        } catch (Exception e) {
                            echo "ECR login failed with error: ${e.getMessage()}"
                            error("ECR login stage failed")
                        }
                    }
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    echo "Starting Docker image push to ECR..."
                    try {
                        sh """
                        echo "Pushing versioned image: ${REPO_URL}:${VERSION_TAG}"
                        docker push ${REPO_URL}:${VERSION_TAG}

                        echo "Pushing latest image: ${REPO_URL}:latest"
                        docker push ${REPO_URL}:latest

                        echo "Successfully pushed images to ECR"
                        echo "Image URI: ${REPO_URL}:${VERSION_TAG}"
                        """
                    } catch (Exception e) {
                        echo "ECR push failed with error: ${e.getMessage()}"
                        error("ECR push stage failed")
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    echo "Starting deployment to EC2 instance (${INSTANCE_IP})..."
                    sshagent (credentials: ['ec2-ssh-key']) {
                        try {
                            sh """
                            echo "Connecting to EC2 instance with verbose logging..."
                            ssh -vvv -o StrictHostKeyChecking=no $SSH_USER@$INSTANCE_IP << 'DEPLOY_EOF'
                            echo "=== Starting deployment on EC2 ==="
                            echo "Current user: \$(whoami)"
                            echo "Docker version: \$(docker --version)"

                            echo "Configuring AWS CLI on EC2..."
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws configure set region $AWS_REGION

                            echo "Logging into ECR from EC2..."
                            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${REPO_BASE_URL}

                            echo "Pulling latest image..."
                            docker pull ${REPO_URL}:latest

                            echo "Checking for existing container..."
                            docker ps -a | grep ${CONTAINER_NAME} || echo "No existing container found"

                            echo "Stopping and removing existing container if running..."
                            docker stop ${CONTAINER_NAME} || echo "No running container to stop"
                            docker rm ${CONTAINER_NAME} || echo "No container to remove"

                            echo "Starting new container on port 91..."
                            docker run -d -p 91:91 --name ${CONTAINER_NAME} \\
                                -e WEATHER_API_KEY=\\$WEATHER_API_KEY \\
                                ${REPO_URL}:latest

                            echo "Container status:"
                            docker ps -f name=${CONTAINER_NAME}

                            echo "Container logs (first 20 lines):"
                            docker logs --tail 20 ${CONTAINER_NAME}

                            echo "=== Deployment completed on EC2 ==="
                            DEPLOY_EOF
                            """
                            echo "Deployment to EC2 completed successfully"
                        } catch (Exception e) {
                            echo "EC2 deployment failed with error: ${e.getMessage()}"
                            error("EC2 deployment stage failed")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "=================================================================="
            echo "Pipeline execution completed - Status: ${currentBuild.currentResult}"
            echo "Image version: ${REPO_URL}:${VERSION_TAG}"
            echo "Build duration: ${currentBuild.durationString}"
            echo "=================================================================="
        }
        success {
            echo "SUCCESS: Pipeline executed successfully!"
            echo "Deployed service: ${CONTAINER_NAME}"
            echo "Access URL: http://${INSTANCE_IP}:91"
            echo "ECR Images:"
            echo "  - Versioned: ${REPO_URL}:${VERSION_TAG}"
            echo "  - Latest: ${REPO_URL}:latest"
        }
        failure {
            echo "FAILURE: Pipeline execution failed!"
            echo "Check the console output for detailed error messages."
            echo "Failed image version: ${VERSION_TAG}"
            echo "Last successful build: ${currentBuild.previousBuild?.result ?: 'N/A'}"
        }
    }
}